//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Account_Image_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "Account_Image", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account_Image), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Account_Role_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "Account_Role", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account_Role), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Album_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Album), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Album_Fiend_Album_Fiend", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "Album_Fiend", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Album_Fiend), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Comment_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.Account), "Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Comment), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Friend_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "Friend", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Friend), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Friend_Account1", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "Friend", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Friend), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_ImageReport_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account), "ImageReport", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.ImageReport), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Account_Image_Image", "Image", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Image), "Account_Image", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account_Image), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_NiceCommision_Account_Image", "Account_Image", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Account_Image), "NiceCommision", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.NiceCommision), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Account_Role_Role", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Role), "Account_Role", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account_Role), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Album_AvailabilityType", "AvailabilityType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.AvailabilityType), "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Album), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Album_Fiend_Album", "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Album), "Album_Fiend", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Album_Fiend), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Comment_Album", "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Album), "Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Comment), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Image_Album", "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Album), "Image", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Image), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_ImageReport_Image", "Image", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Image), "ImageReport", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.ImageReport), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Role_MenuItem_MenuItem", "MenuItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.MenuItem), "Role_MenuItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Role_MenuItem), true)]
[assembly: EdmRelationshipAttribute("NicePhotosModel", "FK_Role_MenuItem_Role", "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Common.Role), "Role_MenuItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Role_MenuItem), true)]

#endregion

namespace Common
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NicePhotosEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new NicePhotosEntities object using the connection string found in the 'NicePhotosEntities' section of the application configuration file.
        /// </summary>
        public NicePhotosEntities() : base("name=NicePhotosEntities", "NicePhotosEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NicePhotosEntities object.
        /// </summary>
        public NicePhotosEntities(string connectionString) : base(connectionString, "NicePhotosEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NicePhotosEntities object.
        /// </summary>
        public NicePhotosEntities(EntityConnection connection) : base(connection, "NicePhotosEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Accounts
        {
            get
            {
                if ((_Accounts == null))
                {
                    _Accounts = base.CreateObjectSet<Account>("Accounts");
                }
                return _Accounts;
            }
        }
        private ObjectSet<Account> _Accounts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account_Image> Account_Image
        {
            get
            {
                if ((_Account_Image == null))
                {
                    _Account_Image = base.CreateObjectSet<Account_Image>("Account_Image");
                }
                return _Account_Image;
            }
        }
        private ObjectSet<Account_Image> _Account_Image;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account_Role> Account_Role
        {
            get
            {
                if ((_Account_Role == null))
                {
                    _Account_Role = base.CreateObjectSet<Account_Role>("Account_Role");
                }
                return _Account_Role;
            }
        }
        private ObjectSet<Account_Role> _Account_Role;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Album> Albums
        {
            get
            {
                if ((_Albums == null))
                {
                    _Albums = base.CreateObjectSet<Album>("Albums");
                }
                return _Albums;
            }
        }
        private ObjectSet<Album> _Albums;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Album_Fiend> Album_Fiend
        {
            get
            {
                if ((_Album_Fiend == null))
                {
                    _Album_Fiend = base.CreateObjectSet<Album_Fiend>("Album_Fiend");
                }
                return _Album_Fiend;
            }
        }
        private ObjectSet<Album_Fiend> _Album_Fiend;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AvailabilityType> AvailabilityTypes
        {
            get
            {
                if ((_AvailabilityTypes == null))
                {
                    _AvailabilityTypes = base.CreateObjectSet<AvailabilityType>("AvailabilityTypes");
                }
                return _AvailabilityTypes;
            }
        }
        private ObjectSet<AvailabilityType> _AvailabilityTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Comment> Comments
        {
            get
            {
                if ((_Comments == null))
                {
                    _Comments = base.CreateObjectSet<Comment>("Comments");
                }
                return _Comments;
            }
        }
        private ObjectSet<Comment> _Comments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Friend> Friends
        {
            get
            {
                if ((_Friends == null))
                {
                    _Friends = base.CreateObjectSet<Friend>("Friends");
                }
                return _Friends;
            }
        }
        private ObjectSet<Friend> _Friends;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Image> Images
        {
            get
            {
                if ((_Images == null))
                {
                    _Images = base.CreateObjectSet<Image>("Images");
                }
                return _Images;
            }
        }
        private ObjectSet<Image> _Images;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ImageReport> ImageReports
        {
            get
            {
                if ((_ImageReports == null))
                {
                    _ImageReports = base.CreateObjectSet<ImageReport>("ImageReports");
                }
                return _ImageReports;
            }
        }
        private ObjectSet<ImageReport> _ImageReports;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Log> Logs
        {
            get
            {
                if ((_Logs == null))
                {
                    _Logs = base.CreateObjectSet<Log>("Logs");
                }
                return _Logs;
            }
        }
        private ObjectSet<Log> _Logs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MenuItem> MenuItems
        {
            get
            {
                if ((_MenuItems == null))
                {
                    _MenuItems = base.CreateObjectSet<MenuItem>("MenuItems");
                }
                return _MenuItems;
            }
        }
        private ObjectSet<MenuItem> _MenuItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NiceCommision> NiceCommisions
        {
            get
            {
                if ((_NiceCommisions == null))
                {
                    _NiceCommisions = base.CreateObjectSet<NiceCommision>("NiceCommisions");
                }
                return _NiceCommisions;
            }
        }
        private ObjectSet<NiceCommision> _NiceCommisions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Role> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Role>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Role> _Roles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Role_MenuItem> Role_MenuItem
        {
            get
            {
                if ((_Role_MenuItem == null))
                {
                    _Role_MenuItem = base.CreateObjectSet<Role_MenuItem>("Role_MenuItem");
                }
                return _Role_MenuItem;
            }
        }
        private ObjectSet<Role_MenuItem> _Role_MenuItem;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Accounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccounts(Account account)
        {
            base.AddObject("Accounts", account);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Account_Image EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccount_Image(Account_Image account_Image)
        {
            base.AddObject("Account_Image", account_Image);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Account_Role EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccount_Role(Account_Role account_Role)
        {
            base.AddObject("Account_Role", account_Role);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Albums EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAlbums(Album album)
        {
            base.AddObject("Albums", album);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Album_Fiend EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAlbum_Fiend(Album_Fiend album_Fiend)
        {
            base.AddObject("Album_Fiend", album_Fiend);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AvailabilityTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAvailabilityTypes(AvailabilityType availabilityType)
        {
            base.AddObject("AvailabilityTypes", availabilityType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Comments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToComments(Comment comment)
        {
            base.AddObject("Comments", comment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Friends EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFriends(Friend friend)
        {
            base.AddObject("Friends", friend);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Images EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToImages(Image image)
        {
            base.AddObject("Images", image);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ImageReports EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToImageReports(ImageReport imageReport)
        {
            base.AddObject("ImageReports", imageReport);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Logs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLogs(Log log)
        {
            base.AddObject("Logs", log);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MenuItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMenuItems(MenuItem menuItem)
        {
            base.AddObject("MenuItems", menuItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NiceCommisions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNiceCommisions(NiceCommision niceCommision)
        {
            base.AddObject("NiceCommisions", niceCommision);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Roles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoles(Role role)
        {
            base.AddObject("Roles", role);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Role_MenuItem EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRole_MenuItem(Role_MenuItem role_MenuItem)
        {
            base.AddObject("Role_MenuItem", role_MenuItem);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="friend">No Metadata Documentation available.</param>
        public int AddFriend(global::System.String username, global::System.String friend)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter friendParameter;
            if (friend != null)
            {
                friendParameter = new ObjectParameter("Friend", friend);
            }
            else
            {
                friendParameter = new ObjectParameter("Friend", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AddFriend", usernameParameter, friendParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public int ChangePassword(global::System.String username, global::System.String password)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("ChangePassword", usernameParameter, passwordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public ObjectResult<Account> LogIn(global::System.String username, global::System.String password)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Account>("LogIn", usernameParameter, passwordParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public ObjectResult<Account> LogIn(global::System.String username, global::System.String password, MergeOption mergeOption)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Account>("LogIn", mergeOption, usernameParameter, passwordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="hexstring">No Metadata Documentation available.</param>
        public ObjectResult<global::System.String> DecryptString(global::System.String hexstring)
        {
            ObjectParameter hexstringParameter;
            if (hexstring != null)
            {
                hexstringParameter = new ObjectParameter("hexstring", hexstring);
            }
            else
            {
                hexstringParameter = new ObjectParameter("hexstring", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<global::System.String>("DecryptString", hexstringParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="text">No Metadata Documentation available.</param>
        public ObjectResult<global::System.String> EncryptString(global::System.String text)
        {
            ObjectParameter textParameter;
            if (text != null)
            {
                textParameter = new ObjectParameter("Text", text);
            }
            else
            {
                textParameter = new ObjectParameter("Text", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<global::System.String>("EncryptString", textParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="username">No Metadata Documentation available.</param>
        public int SendForgotPasswordRequest(global::System.String username)
        {
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("SendForgotPasswordRequest", usernameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public int CreateAccount(global::System.String email, global::System.String username, global::System.String password)
        {
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateAccount", emailParameter, usernameParameter, passwordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="albumName">No Metadata Documentation available.</param>
        /// <param name="owner">No Metadata Documentation available.</param>
        /// <param name="availability">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Guid>> CreateAlbum(global::System.String albumName, global::System.String owner, Nullable<global::System.Int32> availability)
        {
            ObjectParameter albumNameParameter;
            if (albumName != null)
            {
                albumNameParameter = new ObjectParameter("AlbumName", albumName);
            }
            else
            {
                albumNameParameter = new ObjectParameter("AlbumName", typeof(global::System.String));
            }
    
            ObjectParameter ownerParameter;
            if (owner != null)
            {
                ownerParameter = new ObjectParameter("Owner", owner);
            }
            else
            {
                ownerParameter = new ObjectParameter("Owner", typeof(global::System.String));
            }
    
            ObjectParameter availabilityParameter;
            if (availability.HasValue)
            {
                availabilityParameter = new ObjectParameter("Availability", availability);
            }
            else
            {
                availabilityParameter = new ObjectParameter("Availability", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Guid>>("CreateAlbum", albumNameParameter, ownerParameter, availabilityParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="verificationCode">No Metadata Documentation available.</param>
        /// <param name="username">No Metadata Documentation available.</param>
        /// <param name="privateKey">No Metadata Documentation available.</param>
        public int SetAccountVerified(global::System.String verificationCode, global::System.String username, global::System.String privateKey)
        {
            ObjectParameter verificationCodeParameter;
            if (verificationCode != null)
            {
                verificationCodeParameter = new ObjectParameter("VerificationCode", verificationCode);
            }
            else
            {
                verificationCodeParameter = new ObjectParameter("VerificationCode", typeof(global::System.String));
            }
    
            ObjectParameter usernameParameter;
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(global::System.String));
            }
    
            ObjectParameter privateKeyParameter;
            if (privateKey != null)
            {
                privateKeyParameter = new ObjectParameter("PrivateKey", privateKey);
            }
            else
            {
                privateKeyParameter = new ObjectParameter("PrivateKey", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("SetAccountVerified", verificationCodeParameter, usernameParameter, privateKeyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="emailAddress">No Metadata Documentation available.</param>
        /// <param name="subject">No Metadata Documentation available.</param>
        /// <param name="body">No Metadata Documentation available.</param>
        public int SendEmail(global::System.String emailAddress, global::System.String subject, global::System.String body)
        {
            ObjectParameter emailAddressParameter;
            if (emailAddress != null)
            {
                emailAddressParameter = new ObjectParameter("EmailAddress", emailAddress);
            }
            else
            {
                emailAddressParameter = new ObjectParameter("EmailAddress", typeof(global::System.String));
            }
    
            ObjectParameter subjectParameter;
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(global::System.String));
            }
    
            ObjectParameter bodyParameter;
            if (body != null)
            {
                bodyParameter = new ObjectParameter("Body", body);
            }
            else
            {
                bodyParameter = new ObjectParameter("Body", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("SendEmail", emailAddressParameter, subjectParameter, bodyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="roleId">No Metadata Documentation available.</param>
        /// <param name="menuItemId">No Metadata Documentation available.</param>
        public int AddRole_MenuItem(global::System.String roleId, Nullable<global::System.Int32> menuItemId)
        {
            ObjectParameter roleIdParameter;
            if (roleId != null)
            {
                roleIdParameter = new ObjectParameter("RoleId", roleId);
            }
            else
            {
                roleIdParameter = new ObjectParameter("RoleId", typeof(global::System.String));
            }
    
            ObjectParameter menuItemIdParameter;
            if (menuItemId.HasValue)
            {
                menuItemIdParameter = new ObjectParameter("MenuItemId", menuItemId);
            }
            else
            {
                menuItemIdParameter = new ObjectParameter("MenuItemId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("AddRole_MenuItem", roleIdParameter, menuItemIdParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="credits">Initial value of the Credits property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="surname">Initial value of the Surname property.</param>
        /// <param name="aboutMe">Initial value of the AboutMe property.</param>
        /// <param name="apiKey">Initial value of the ApiKey property.</param>
        public static Account CreateAccount(global::System.String username, global::System.String email, global::System.String password, global::System.Int32 credits, global::System.String name, global::System.String surname, global::System.String aboutMe, global::System.Guid apiKey)
        {
            Account account = new Account();
            account.Username = username;
            account.Email = email;
            account.Password = password;
            account.Credits = credits;
            account.Name = name;
            account.Surname = surname;
            account.AboutMe = aboutMe;
            account.ApiKey = apiKey;
            return account;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                if (_Username != value)
                {
                    OnUsernameChanging(value);
                    ReportPropertyChanging("Username");
                    _Username = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Username");
                    OnUsernameChanged();
                }
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Credits
        {
            get
            {
                return _Credits;
            }
            set
            {
                OnCreditsChanging(value);
                ReportPropertyChanging("Credits");
                _Credits = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Credits");
                OnCreditsChanged();
            }
        }
        private global::System.Int32 _Credits;
        partial void OnCreditsChanging(global::System.Int32 value);
        partial void OnCreditsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String VerificationCode
        {
            get
            {
                return _VerificationCode;
            }
            set
            {
                OnVerificationCodeChanging(value);
                ReportPropertyChanging("VerificationCode");
                _VerificationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("VerificationCode");
                OnVerificationCodeChanged();
            }
        }
        private global::System.String _VerificationCode;
        partial void OnVerificationCodeChanging(global::System.String value);
        partial void OnVerificationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                OnSurnameChanging(value);
                ReportPropertyChanging("Surname");
                _Surname = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Surname");
                OnSurnameChanged();
            }
        }
        private global::System.String _Surname;
        partial void OnSurnameChanging(global::System.String value);
        partial void OnSurnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AboutMe
        {
            get
            {
                return _AboutMe;
            }
            set
            {
                OnAboutMeChanging(value);
                ReportPropertyChanging("AboutMe");
                _AboutMe = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AboutMe");
                OnAboutMeChanged();
            }
        }
        private global::System.String _AboutMe;
        partial void OnAboutMeChanging(global::System.String value);
        partial void OnAboutMeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrivateKey
        {
            get
            {
                return _PrivateKey;
            }
            set
            {
                OnPrivateKeyChanging(value);
                ReportPropertyChanging("PrivateKey");
                _PrivateKey = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PrivateKey");
                OnPrivateKeyChanged();
            }
        }
        private global::System.String _PrivateKey;
        partial void OnPrivateKeyChanging(global::System.String value);
        partial void OnPrivateKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApiKey
        {
            get
            {
                return _ApiKey;
            }
            set
            {
                OnApiKeyChanging(value);
                ReportPropertyChanging("ApiKey");
                _ApiKey = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApiKey");
                OnApiKeyChanged();
            }
        }
        private global::System.Guid _ApiKey;
        partial void OnApiKeyChanging(global::System.Guid value);
        partial void OnApiKeyChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Image_Account", "Account_Image")]
        public EntityCollection<Account_Image> Account_Image
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account_Image>("NicePhotosModel.FK_Account_Image_Account", "Account_Image");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account_Image>("NicePhotosModel.FK_Account_Image_Account", "Account_Image", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Role_Account", "Account_Role")]
        public EntityCollection<Account_Role> Account_Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account_Role>("NicePhotosModel.FK_Account_Role_Account", "Account_Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account_Role>("NicePhotosModel.FK_Account_Role_Account", "Account_Role", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_Account", "Album")]
        public EntityCollection<Album> Albums
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Album>("NicePhotosModel.FK_Album_Account", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Album>("NicePhotosModel.FK_Album_Account", "Album", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_Fiend_Album_Fiend", "Album_Fiend")]
        public EntityCollection<Album_Fiend> Album_Fiend
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Album_Fiend>("NicePhotosModel.FK_Album_Fiend_Album_Fiend", "Album_Fiend");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Album_Fiend>("NicePhotosModel.FK_Album_Fiend_Album_Fiend", "Album_Fiend", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Comment_Account", "Comment")]
        public EntityCollection<Comment> Comments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Comment>("NicePhotosModel.FK_Comment_Account", "Comment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Comment>("NicePhotosModel.FK_Comment_Account", "Comment", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Friend_Account", "Friend")]
        public EntityCollection<Friend> Friends
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Friend>("NicePhotosModel.FK_Friend_Account", "Friend");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Friend>("NicePhotosModel.FK_Friend_Account", "Friend", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Friend_Account1", "Friend")]
        public EntityCollection<Friend> Friends1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Friend>("NicePhotosModel.FK_Friend_Account1", "Friend");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Friend>("NicePhotosModel.FK_Friend_Account1", "Friend", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_ImageReport_Account", "ImageReport")]
        public EntityCollection<ImageReport> ImageReports
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ImageReport>("NicePhotosModel.FK_ImageReport_Account", "ImageReport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ImageReport>("NicePhotosModel.FK_ImageReport_Account", "ImageReport", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Account_Image")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account_Image : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account_Image object.
        /// </summary>
        /// <param name="accountImageId">Initial value of the AccountImageId property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="imageId">Initial value of the ImageId property.</param>
        /// <param name="cost">Initial value of the Cost property.</param>
        public static Account_Image CreateAccount_Image(global::System.Guid accountImageId, global::System.String username, global::System.Guid imageId, global::System.Int32 cost)
        {
            Account_Image account_Image = new Account_Image();
            account_Image.AccountImageId = accountImageId;
            account_Image.Username = username;
            account_Image.ImageId = imageId;
            account_Image.Cost = cost;
            return account_Image;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountImageId
        {
            get
            {
                return _AccountImageId;
            }
            set
            {
                if (_AccountImageId != value)
                {
                    OnAccountImageIdChanging(value);
                    ReportPropertyChanging("AccountImageId");
                    _AccountImageId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccountImageId");
                    OnAccountImageIdChanged();
                }
            }
        }
        private global::System.Guid _AccountImageId;
        partial void OnAccountImageIdChanging(global::System.Guid value);
        partial void OnAccountImageIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ImageId
        {
            get
            {
                return _ImageId;
            }
            set
            {
                OnImageIdChanging(value);
                ReportPropertyChanging("ImageId");
                _ImageId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ImageId");
                OnImageIdChanged();
            }
        }
        private global::System.Guid _ImageId;
        partial void OnImageIdChanging(global::System.Guid value);
        partial void OnImageIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Cost
        {
            get
            {
                return _Cost;
            }
            set
            {
                OnCostChanging(value);
                ReportPropertyChanging("Cost");
                _Cost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Cost");
                OnCostChanged();
            }
        }
        private global::System.Int32 _Cost;
        partial void OnCostChanging(global::System.Int32 value);
        partial void OnCostChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Image_Account", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Account_Image_Account", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Account_Image_Account", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Account_Image_Account", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Account_Image_Account", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Image_Image", "Image")]
        public Image Image
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Image>("NicePhotosModel.FK_Account_Image_Image", "Image").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Image>("NicePhotosModel.FK_Account_Image_Image", "Image").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Image> ImageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Image>("NicePhotosModel.FK_Account_Image_Image", "Image");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Image>("NicePhotosModel.FK_Account_Image_Image", "Image", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_NiceCommision_Account_Image", "NiceCommision")]
        public EntityCollection<NiceCommision> NiceCommisions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NiceCommision>("NicePhotosModel.FK_NiceCommision_Account_Image", "NiceCommision");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NiceCommision>("NicePhotosModel.FK_NiceCommision_Account_Image", "NiceCommision", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Account_Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account_Role : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account_Role object.
        /// </summary>
        /// <param name="roleId">Initial value of the RoleId property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="accountRoleId">Initial value of the AccountRoleId property.</param>
        public static Account_Role CreateAccount_Role(global::System.String roleId, global::System.String username, global::System.Guid accountRoleId)
        {
            Account_Role account_Role = new Account_Role();
            account_Role.RoleId = roleId;
            account_Role.Username = username;
            account_Role.AccountRoleId = accountRoleId;
            return account_Role;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                OnRoleIdChanging(value);
                ReportPropertyChanging("RoleId");
                _RoleId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleId");
                OnRoleIdChanged();
            }
        }
        private global::System.String _RoleId;
        partial void OnRoleIdChanging(global::System.String value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountRoleId
        {
            get
            {
                return _AccountRoleId;
            }
            set
            {
                if (_AccountRoleId != value)
                {
                    OnAccountRoleIdChanging(value);
                    ReportPropertyChanging("AccountRoleId");
                    _AccountRoleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccountRoleId");
                    OnAccountRoleIdChanged();
                }
            }
        }
        private global::System.Guid _AccountRoleId;
        partial void OnAccountRoleIdChanging(global::System.Guid value);
        partial void OnAccountRoleIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Role_Account", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Account_Role_Account", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Account_Role_Account", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Account_Role_Account", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Account_Role_Account", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Role_Role", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("NicePhotosModel.FK_Account_Role_Role", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("NicePhotosModel.FK_Account_Role_Role", "Role").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("NicePhotosModel.FK_Account_Role_Role", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("NicePhotosModel.FK_Account_Role_Role", "Role", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Album")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Album : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Album object.
        /// </summary>
        /// <param name="albumId">Initial value of the AlbumId property.</param>
        /// <param name="albumName">Initial value of the AlbumName property.</param>
        /// <param name="owner">Initial value of the Owner property.</param>
        /// <param name="availability">Initial value of the Availability property.</param>
        /// <param name="removed">Initial value of the Removed property.</param>
        public static Album CreateAlbum(global::System.Guid albumId, global::System.String albumName, global::System.String owner, global::System.Int32 availability, global::System.Boolean removed)
        {
            Album album = new Album();
            album.AlbumId = albumId;
            album.AlbumName = albumName;
            album.Owner = owner;
            album.Availability = availability;
            album.Removed = removed;
            return album;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AlbumId
        {
            get
            {
                return _AlbumId;
            }
            set
            {
                if (_AlbumId != value)
                {
                    OnAlbumIdChanging(value);
                    ReportPropertyChanging("AlbumId");
                    _AlbumId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AlbumId");
                    OnAlbumIdChanged();
                }
            }
        }
        private global::System.Guid _AlbumId;
        partial void OnAlbumIdChanging(global::System.Guid value);
        partial void OnAlbumIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AlbumName
        {
            get
            {
                return _AlbumName;
            }
            set
            {
                OnAlbumNameChanging(value);
                ReportPropertyChanging("AlbumName");
                _AlbumName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AlbumName");
                OnAlbumNameChanged();
            }
        }
        private global::System.String _AlbumName;
        partial void OnAlbumNameChanging(global::System.String value);
        partial void OnAlbumNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Owner
        {
            get
            {
                return _Owner;
            }
            set
            {
                OnOwnerChanging(value);
                ReportPropertyChanging("Owner");
                _Owner = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Owner");
                OnOwnerChanged();
            }
        }
        private global::System.String _Owner;
        partial void OnOwnerChanging(global::System.String value);
        partial void OnOwnerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Availability
        {
            get
            {
                return _Availability;
            }
            set
            {
                OnAvailabilityChanging(value);
                ReportPropertyChanging("Availability");
                _Availability = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Availability");
                OnAvailabilityChanged();
            }
        }
        private global::System.Int32 _Availability;
        partial void OnAvailabilityChanging(global::System.Int32 value);
        partial void OnAvailabilityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Removed
        {
            get
            {
                return _Removed;
            }
            set
            {
                OnRemovedChanging(value);
                ReportPropertyChanging("Removed");
                _Removed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Removed");
                OnRemovedChanged();
            }
        }
        private global::System.Boolean _Removed;
        partial void OnRemovedChanging(global::System.Boolean value);
        partial void OnRemovedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_Account", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Album_Account", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Album_Account", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Album_Account", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Album_Account", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_AvailabilityType", "AvailabilityType")]
        public AvailabilityType AvailabilityType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AvailabilityType>("NicePhotosModel.FK_Album_AvailabilityType", "AvailabilityType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AvailabilityType>("NicePhotosModel.FK_Album_AvailabilityType", "AvailabilityType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AvailabilityType> AvailabilityTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AvailabilityType>("NicePhotosModel.FK_Album_AvailabilityType", "AvailabilityType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AvailabilityType>("NicePhotosModel.FK_Album_AvailabilityType", "AvailabilityType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_Fiend_Album", "Album_Fiend")]
        public EntityCollection<Album_Fiend> Album_Fiend
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Album_Fiend>("NicePhotosModel.FK_Album_Fiend_Album", "Album_Fiend");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Album_Fiend>("NicePhotosModel.FK_Album_Fiend_Album", "Album_Fiend", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Comment_Album", "Comment")]
        public EntityCollection<Comment> Comments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Comment>("NicePhotosModel.FK_Comment_Album", "Comment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Comment>("NicePhotosModel.FK_Comment_Album", "Comment", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Image_Album", "Image")]
        public EntityCollection<Image> Images
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Image>("NicePhotosModel.FK_Image_Album", "Image");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Image>("NicePhotosModel.FK_Image_Album", "Image", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Album_Fiend")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Album_Fiend : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Album_Fiend object.
        /// </summary>
        /// <param name="albumFriendId">Initial value of the AlbumFriendId property.</param>
        /// <param name="albumId">Initial value of the AlbumId property.</param>
        /// <param name="friendAccount">Initial value of the FriendAccount property.</param>
        public static Album_Fiend CreateAlbum_Fiend(global::System.Guid albumFriendId, global::System.Guid albumId, global::System.String friendAccount)
        {
            Album_Fiend album_Fiend = new Album_Fiend();
            album_Fiend.AlbumFriendId = albumFriendId;
            album_Fiend.AlbumId = albumId;
            album_Fiend.FriendAccount = friendAccount;
            return album_Fiend;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AlbumFriendId
        {
            get
            {
                return _AlbumFriendId;
            }
            set
            {
                if (_AlbumFriendId != value)
                {
                    OnAlbumFriendIdChanging(value);
                    ReportPropertyChanging("AlbumFriendId");
                    _AlbumFriendId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AlbumFriendId");
                    OnAlbumFriendIdChanged();
                }
            }
        }
        private global::System.Guid _AlbumFriendId;
        partial void OnAlbumFriendIdChanging(global::System.Guid value);
        partial void OnAlbumFriendIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AlbumId
        {
            get
            {
                return _AlbumId;
            }
            set
            {
                OnAlbumIdChanging(value);
                ReportPropertyChanging("AlbumId");
                _AlbumId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AlbumId");
                OnAlbumIdChanged();
            }
        }
        private global::System.Guid _AlbumId;
        partial void OnAlbumIdChanging(global::System.Guid value);
        partial void OnAlbumIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendAccount
        {
            get
            {
                return _FriendAccount;
            }
            set
            {
                OnFriendAccountChanging(value);
                ReportPropertyChanging("FriendAccount");
                _FriendAccount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendAccount");
                OnFriendAccountChanged();
            }
        }
        private global::System.String _FriendAccount;
        partial void OnFriendAccountChanging(global::System.String value);
        partial void OnFriendAccountChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_Fiend_Album_Fiend", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Album_Fiend_Album_Fiend", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Album_Fiend_Album_Fiend", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Album_Fiend_Album_Fiend", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Album_Fiend_Album_Fiend", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_Fiend_Album", "Album")]
        public Album Album
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Album_Fiend_Album", "Album").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Album_Fiend_Album", "Album").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Album> AlbumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Album_Fiend_Album", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Album>("NicePhotosModel.FK_Album_Fiend_Album", "Album", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="AvailabilityType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AvailabilityType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AvailabilityType object.
        /// </summary>
        /// <param name="typeId">Initial value of the TypeId property.</param>
        /// <param name="typeName">Initial value of the TypeName property.</param>
        public static AvailabilityType CreateAvailabilityType(global::System.Int32 typeId, global::System.String typeName)
        {
            AvailabilityType availabilityType = new AvailabilityType();
            availabilityType.TypeId = typeId;
            availabilityType.TypeName = typeName;
            return availabilityType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TypeId
        {
            get
            {
                return _TypeId;
            }
            set
            {
                if (_TypeId != value)
                {
                    OnTypeIdChanging(value);
                    ReportPropertyChanging("TypeId");
                    _TypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TypeId");
                    OnTypeIdChanged();
                }
            }
        }
        private global::System.Int32 _TypeId;
        partial void OnTypeIdChanging(global::System.Int32 value);
        partial void OnTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Album_AvailabilityType", "Album")]
        public EntityCollection<Album> Albums
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Album>("NicePhotosModel.FK_Album_AvailabilityType", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Album>("NicePhotosModel.FK_Album_AvailabilityType", "Album", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Comment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Comment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Comment object.
        /// </summary>
        /// <param name="commentId">Initial value of the CommentId property.</param>
        /// <param name="time">Initial value of the Time property.</param>
        /// <param name="comment1">Initial value of the Comment1 property.</param>
        /// <param name="album">Initial value of the Album property.</param>
        /// <param name="flagged">Initial value of the Flagged property.</param>
        public static Comment CreateComment(global::System.Guid commentId, global::System.DateTime time, global::System.String comment1, global::System.Guid album, global::System.Boolean flagged)
        {
            Comment comment = new Comment();
            comment.CommentId = commentId;
            comment.Time = time;
            comment.Comment1 = comment1;
            comment.Album = album;
            comment.Flagged = flagged;
            return comment;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CommentId
        {
            get
            {
                return _CommentId;
            }
            set
            {
                if (_CommentId != value)
                {
                    OnCommentIdChanging(value);
                    ReportPropertyChanging("CommentId");
                    _CommentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommentId");
                    OnCommentIdChanged();
                }
            }
        }
        private global::System.Guid _CommentId;
        partial void OnCommentIdChanging(global::System.Guid value);
        partial void OnCommentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private global::System.DateTime _Time;
        partial void OnTimeChanging(global::System.DateTime value);
        partial void OnTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Comment1
        {
            get
            {
                return _Comment1;
            }
            set
            {
                OnComment1Changing(value);
                ReportPropertyChanging("Comment1");
                _Comment1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Comment1");
                OnComment1Changed();
            }
        }
        private global::System.String _Comment1;
        partial void OnComment1Changing(global::System.String value);
        partial void OnComment1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Album
        {
            get
            {
                return _Album;
            }
            set
            {
                OnAlbumChanging(value);
                ReportPropertyChanging("Album");
                _Album = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Album");
                OnAlbumChanged();
            }
        }
        private global::System.Guid _Album;
        partial void OnAlbumChanging(global::System.Guid value);
        partial void OnAlbumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Flagged
        {
            get
            {
                return _Flagged;
            }
            set
            {
                OnFlaggedChanging(value);
                ReportPropertyChanging("Flagged");
                _Flagged = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Flagged");
                OnFlaggedChanged();
            }
        }
        private global::System.Boolean _Flagged;
        partial void OnFlaggedChanging(global::System.Boolean value);
        partial void OnFlaggedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Comment_Account", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Comment_Account", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Comment_Account", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Comment_Account", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Comment_Account", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Comment_Album", "Album")]
        public Album Album1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Comment_Album", "Album").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Comment_Album", "Album").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Album> Album1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Comment_Album", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Album>("NicePhotosModel.FK_Comment_Album", "Album", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Friend")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Friend : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Friend object.
        /// </summary>
        /// <param name="friendId">Initial value of the FriendId property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="friend1">Initial value of the Friend1 property.</param>
        public static Friend CreateFriend(global::System.Guid friendId, global::System.String username, global::System.String friend1)
        {
            Friend friend = new Friend();
            friend.FriendId = friendId;
            friend.Username = username;
            friend.Friend1 = friend1;
            return friend;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FriendId
        {
            get
            {
                return _FriendId;
            }
            set
            {
                if (_FriendId != value)
                {
                    OnFriendIdChanging(value);
                    ReportPropertyChanging("FriendId");
                    _FriendId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FriendId");
                    OnFriendIdChanged();
                }
            }
        }
        private global::System.Guid _FriendId;
        partial void OnFriendIdChanging(global::System.Guid value);
        partial void OnFriendIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Friend1
        {
            get
            {
                return _Friend1;
            }
            set
            {
                OnFriend1Changing(value);
                ReportPropertyChanging("Friend1");
                _Friend1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Friend1");
                OnFriend1Changed();
            }
        }
        private global::System.String _Friend1;
        partial void OnFriend1Changing(global::System.String value);
        partial void OnFriend1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Friend_Account", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Friend_Account", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Friend_Account", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Friend_Account", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Friend_Account", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Friend_Account1", "Account")]
        public Account Account1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Friend_Account1", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Friend_Account1", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> Account1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_Friend_Account1", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_Friend_Account1", "Account", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Image")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Image : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Image object.
        /// </summary>
        /// <param name="imageId">Initial value of the ImageId property.</param>
        /// <param name="album">Initial value of the Album property.</param>
        /// <param name="imageName">Initial value of the ImageName property.</param>
        /// <param name="imageDescruption">Initial value of the ImageDescruption property.</param>
        /// <param name="cost">Initial value of the Cost property.</param>
        /// <param name="removed">Initial value of the Removed property.</param>
        /// <param name="fileExtension">Initial value of the FileExtension property.</param>
        /// <param name="digitalSignature">Initial value of the DigitalSignature property.</param>
        public static Image CreateImage(global::System.Guid imageId, global::System.Guid album, global::System.String imageName, global::System.String imageDescruption, global::System.Int32 cost, global::System.Boolean removed, global::System.String fileExtension, global::System.String digitalSignature)
        {
            Image image = new Image();
            image.ImageId = imageId;
            image.Album = album;
            image.ImageName = imageName;
            image.ImageDescruption = imageDescruption;
            image.Cost = cost;
            image.Removed = removed;
            image.FileExtension = fileExtension;
            image.DigitalSignature = digitalSignature;
            return image;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ImageId
        {
            get
            {
                return _ImageId;
            }
            set
            {
                if (_ImageId != value)
                {
                    OnImageIdChanging(value);
                    ReportPropertyChanging("ImageId");
                    _ImageId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ImageId");
                    OnImageIdChanged();
                }
            }
        }
        private global::System.Guid _ImageId;
        partial void OnImageIdChanging(global::System.Guid value);
        partial void OnImageIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Album
        {
            get
            {
                return _Album;
            }
            set
            {
                OnAlbumChanging(value);
                ReportPropertyChanging("Album");
                _Album = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Album");
                OnAlbumChanged();
            }
        }
        private global::System.Guid _Album;
        partial void OnAlbumChanging(global::System.Guid value);
        partial void OnAlbumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ImageName
        {
            get
            {
                return _ImageName;
            }
            set
            {
                OnImageNameChanging(value);
                ReportPropertyChanging("ImageName");
                _ImageName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ImageName");
                OnImageNameChanged();
            }
        }
        private global::System.String _ImageName;
        partial void OnImageNameChanging(global::System.String value);
        partial void OnImageNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ImageDescruption
        {
            get
            {
                return _ImageDescruption;
            }
            set
            {
                OnImageDescruptionChanging(value);
                ReportPropertyChanging("ImageDescruption");
                _ImageDescruption = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ImageDescruption");
                OnImageDescruptionChanged();
            }
        }
        private global::System.String _ImageDescruption;
        partial void OnImageDescruptionChanging(global::System.String value);
        partial void OnImageDescruptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Cost
        {
            get
            {
                return _Cost;
            }
            set
            {
                OnCostChanging(value);
                ReportPropertyChanging("Cost");
                _Cost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Cost");
                OnCostChanged();
            }
        }
        private global::System.Int32 _Cost;
        partial void OnCostChanging(global::System.Int32 value);
        partial void OnCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Removed
        {
            get
            {
                return _Removed;
            }
            set
            {
                OnRemovedChanging(value);
                ReportPropertyChanging("Removed");
                _Removed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Removed");
                OnRemovedChanged();
            }
        }
        private global::System.Boolean _Removed;
        partial void OnRemovedChanging(global::System.Boolean value);
        partial void OnRemovedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FileExtension
        {
            get
            {
                return _FileExtension;
            }
            set
            {
                OnFileExtensionChanging(value);
                ReportPropertyChanging("FileExtension");
                _FileExtension = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FileExtension");
                OnFileExtensionChanged();
            }
        }
        private global::System.String _FileExtension;
        partial void OnFileExtensionChanging(global::System.String value);
        partial void OnFileExtensionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DigitalSignature
        {
            get
            {
                return _DigitalSignature;
            }
            set
            {
                OnDigitalSignatureChanging(value);
                ReportPropertyChanging("DigitalSignature");
                _DigitalSignature = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DigitalSignature");
                OnDigitalSignatureChanged();
            }
        }
        private global::System.String _DigitalSignature;
        partial void OnDigitalSignatureChanging(global::System.String value);
        partial void OnDigitalSignatureChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Image_Image", "Account_Image")]
        public EntityCollection<Account_Image> Account_Image
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account_Image>("NicePhotosModel.FK_Account_Image_Image", "Account_Image");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account_Image>("NicePhotosModel.FK_Account_Image_Image", "Account_Image", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Image_Album", "Album")]
        public Album Album1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Image_Album", "Album").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Image_Album", "Album").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Album> Album1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("NicePhotosModel.FK_Image_Album", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Album>("NicePhotosModel.FK_Image_Album", "Album", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_ImageReport_Image", "ImageReport")]
        public EntityCollection<ImageReport> ImageReports
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ImageReport>("NicePhotosModel.FK_ImageReport_Image", "ImageReport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ImageReport>("NicePhotosModel.FK_ImageReport_Image", "ImageReport", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="ImageReport")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ImageReport : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ImageReport object.
        /// </summary>
        /// <param name="imageReportId">Initial value of the ImageReportId property.</param>
        /// <param name="image">Initial value of the Image property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        public static ImageReport CreateImageReport(global::System.Guid imageReportId, global::System.Guid image, global::System.String username)
        {
            ImageReport imageReport = new ImageReport();
            imageReport.ImageReportId = imageReportId;
            imageReport.Image = image;
            imageReport.Username = username;
            return imageReport;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ImageReportId
        {
            get
            {
                return _ImageReportId;
            }
            set
            {
                if (_ImageReportId != value)
                {
                    OnImageReportIdChanging(value);
                    ReportPropertyChanging("ImageReportId");
                    _ImageReportId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ImageReportId");
                    OnImageReportIdChanged();
                }
            }
        }
        private global::System.Guid _ImageReportId;
        partial void OnImageReportIdChanging(global::System.Guid value);
        partial void OnImageReportIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Image
        {
            get
            {
                return _Image;
            }
            set
            {
                OnImageChanging(value);
                ReportPropertyChanging("Image");
                _Image = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Image");
                OnImageChanged();
            }
        }
        private global::System.Guid _Image;
        partial void OnImageChanging(global::System.Guid value);
        partial void OnImageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_ImageReport_Account", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_ImageReport_Account", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_ImageReport_Account", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("NicePhotosModel.FK_ImageReport_Account", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("NicePhotosModel.FK_ImageReport_Account", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_ImageReport_Image", "Image")]
        public Image Image1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Image>("NicePhotosModel.FK_ImageReport_Image", "Image").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Image>("NicePhotosModel.FK_ImageReport_Image", "Image").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Image> Image1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Image>("NicePhotosModel.FK_ImageReport_Image", "Image");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Image>("NicePhotosModel.FK_ImageReport_Image", "Image", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Log")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Log : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Log object.
        /// </summary>
        /// <param name="logId">Initial value of the LogId property.</param>
        /// <param name="time">Initial value of the Time property.</param>
        public static Log CreateLog(global::System.Guid logId, global::System.DateTime time)
        {
            Log log = new Log();
            log.LogId = logId;
            log.Time = time;
            return log;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid LogId
        {
            get
            {
                return _LogId;
            }
            set
            {
                if (_LogId != value)
                {
                    OnLogIdChanging(value);
                    ReportPropertyChanging("LogId");
                    _LogId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LogId");
                    OnLogIdChanged();
                }
            }
        }
        private global::System.Guid _LogId;
        partial void OnLogIdChanging(global::System.Guid value);
        partial void OnLogIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Details
        {
            get
            {
                return _Details;
            }
            set
            {
                OnDetailsChanging(value);
                ReportPropertyChanging("Details");
                _Details = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Details");
                OnDetailsChanged();
            }
        }
        private global::System.String _Details;
        partial void OnDetailsChanging(global::System.String value);
        partial void OnDetailsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private global::System.DateTime _Time;
        partial void OnTimeChanging(global::System.DateTime value);
        partial void OnTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DetailsBeforeModification
        {
            get
            {
                return _DetailsBeforeModification;
            }
            set
            {
                OnDetailsBeforeModificationChanging(value);
                ReportPropertyChanging("DetailsBeforeModification");
                _DetailsBeforeModification = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DetailsBeforeModification");
                OnDetailsBeforeModificationChanged();
            }
        }
        private global::System.String _DetailsBeforeModification;
        partial void OnDetailsBeforeModificationChanging(global::System.String value);
        partial void OnDetailsBeforeModificationChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="MenuItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MenuItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MenuItem object.
        /// </summary>
        /// <param name="itemId">Initial value of the ItemId property.</param>
        /// <param name="itemName">Initial value of the ItemName property.</param>
        /// <param name="itemLink">Initial value of the ItemLink property.</param>
        public static MenuItem CreateMenuItem(global::System.Int32 itemId, global::System.String itemName, global::System.String itemLink)
        {
            MenuItem menuItem = new MenuItem();
            menuItem.ItemId = itemId;
            menuItem.ItemName = itemName;
            menuItem.ItemLink = itemLink;
            return menuItem;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
                if (_ItemId != value)
                {
                    OnItemIdChanging(value);
                    ReportPropertyChanging("ItemId");
                    _ItemId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ItemId");
                    OnItemIdChanged();
                }
            }
        }
        private global::System.Int32 _ItemId;
        partial void OnItemIdChanging(global::System.Int32 value);
        partial void OnItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemName
        {
            get
            {
                return _ItemName;
            }
            set
            {
                OnItemNameChanging(value);
                ReportPropertyChanging("ItemName");
                _ItemName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ItemName");
                OnItemNameChanged();
            }
        }
        private global::System.String _ItemName;
        partial void OnItemNameChanging(global::System.String value);
        partial void OnItemNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemLink
        {
            get
            {
                return _ItemLink;
            }
            set
            {
                OnItemLinkChanging(value);
                ReportPropertyChanging("ItemLink");
                _ItemLink = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ItemLink");
                OnItemLinkChanged();
            }
        }
        private global::System.String _ItemLink;
        partial void OnItemLinkChanging(global::System.String value);
        partial void OnItemLinkChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Role_MenuItem_MenuItem", "Role_MenuItem")]
        public EntityCollection<Role_MenuItem> Role_MenuItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Role_MenuItem>("NicePhotosModel.FK_Role_MenuItem_MenuItem", "Role_MenuItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Role_MenuItem>("NicePhotosModel.FK_Role_MenuItem_MenuItem", "Role_MenuItem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="NiceCommision")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NiceCommision : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new NiceCommision object.
        /// </summary>
        /// <param name="niceCommisionId">Initial value of the NiceCommisionId property.</param>
        /// <param name="buyerRecord">Initial value of the BuyerRecord property.</param>
        /// <param name="commision">Initial value of the Commision property.</param>
        public static NiceCommision CreateNiceCommision(global::System.Guid niceCommisionId, global::System.Guid buyerRecord, global::System.Int32 commision)
        {
            NiceCommision niceCommision = new NiceCommision();
            niceCommision.NiceCommisionId = niceCommisionId;
            niceCommision.BuyerRecord = buyerRecord;
            niceCommision.Commision = commision;
            return niceCommision;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid NiceCommisionId
        {
            get
            {
                return _NiceCommisionId;
            }
            set
            {
                if (_NiceCommisionId != value)
                {
                    OnNiceCommisionIdChanging(value);
                    ReportPropertyChanging("NiceCommisionId");
                    _NiceCommisionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NiceCommisionId");
                    OnNiceCommisionIdChanged();
                }
            }
        }
        private global::System.Guid _NiceCommisionId;
        partial void OnNiceCommisionIdChanging(global::System.Guid value);
        partial void OnNiceCommisionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid BuyerRecord
        {
            get
            {
                return _BuyerRecord;
            }
            set
            {
                OnBuyerRecordChanging(value);
                ReportPropertyChanging("BuyerRecord");
                _BuyerRecord = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuyerRecord");
                OnBuyerRecordChanged();
            }
        }
        private global::System.Guid _BuyerRecord;
        partial void OnBuyerRecordChanging(global::System.Guid value);
        partial void OnBuyerRecordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Commision
        {
            get
            {
                return _Commision;
            }
            set
            {
                OnCommisionChanging(value);
                ReportPropertyChanging("Commision");
                _Commision = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Commision");
                OnCommisionChanged();
            }
        }
        private global::System.Int32 _Commision;
        partial void OnCommisionChanging(global::System.Int32 value);
        partial void OnCommisionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_NiceCommision_Account_Image", "Account_Image")]
        public Account_Image Account_Image
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account_Image>("NicePhotosModel.FK_NiceCommision_Account_Image", "Account_Image").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account_Image>("NicePhotosModel.FK_NiceCommision_Account_Image", "Account_Image").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account_Image> Account_ImageReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account_Image>("NicePhotosModel.FK_NiceCommision_Account_Image", "Account_Image");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account_Image>("NicePhotosModel.FK_NiceCommision_Account_Image", "Account_Image", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Role object.
        /// </summary>
        /// <param name="roleId">Initial value of the RoleId property.</param>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        public static Role CreateRole(global::System.String roleId, global::System.String roleName)
        {
            Role role = new Role();
            role.RoleId = roleId;
            role.RoleName = roleName;
            return role;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if (_RoleId != value)
                {
                    OnRoleIdChanging(value);
                    ReportPropertyChanging("RoleId");
                    _RoleId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }
        private global::System.String _RoleId;
        partial void OnRoleIdChanging(global::System.String value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Account_Role_Role", "Account_Role")]
        public EntityCollection<Account_Role> Account_Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account_Role>("NicePhotosModel.FK_Account_Role_Role", "Account_Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account_Role>("NicePhotosModel.FK_Account_Role_Role", "Account_Role", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Role_MenuItem_Role", "Role_MenuItem")]
        public EntityCollection<Role_MenuItem> Role_MenuItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Role_MenuItem>("NicePhotosModel.FK_Role_MenuItem_Role", "Role_MenuItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Role_MenuItem>("NicePhotosModel.FK_Role_MenuItem_Role", "Role_MenuItem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NicePhotosModel", Name="Role_MenuItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role_MenuItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Role_MenuItem object.
        /// </summary>
        /// <param name="roleItemId">Initial value of the RoleItemId property.</param>
        /// <param name="role">Initial value of the Role property.</param>
        /// <param name="item">Initial value of the Item property.</param>
        public static Role_MenuItem CreateRole_MenuItem(global::System.Int32 roleItemId, global::System.String role, global::System.Int32 item)
        {
            Role_MenuItem role_MenuItem = new Role_MenuItem();
            role_MenuItem.RoleItemId = roleItemId;
            role_MenuItem.Role = role;
            role_MenuItem.Item = item;
            return role_MenuItem;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleItemId
        {
            get
            {
                return _RoleItemId;
            }
            set
            {
                if (_RoleItemId != value)
                {
                    OnRoleItemIdChanging(value);
                    ReportPropertyChanging("RoleItemId");
                    _RoleItemId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleItemId");
                    OnRoleItemIdChanged();
                }
            }
        }
        private global::System.Int32 _RoleItemId;
        partial void OnRoleItemIdChanging(global::System.Int32 value);
        partial void OnRoleItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Role
        {
            get
            {
                return _Role;
            }
            set
            {
                OnRoleChanging(value);
                ReportPropertyChanging("Role");
                _Role = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Role");
                OnRoleChanged();
            }
        }
        private global::System.String _Role;
        partial void OnRoleChanging(global::System.String value);
        partial void OnRoleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Item
        {
            get
            {
                return _Item;
            }
            set
            {
                OnItemChanging(value);
                ReportPropertyChanging("Item");
                _Item = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Item");
                OnItemChanged();
            }
        }
        private global::System.Int32 _Item;
        partial void OnItemChanging(global::System.Int32 value);
        partial void OnItemChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Role_MenuItem_MenuItem", "MenuItem")]
        public MenuItem MenuItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MenuItem>("NicePhotosModel.FK_Role_MenuItem_MenuItem", "MenuItem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MenuItem>("NicePhotosModel.FK_Role_MenuItem_MenuItem", "MenuItem").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MenuItem> MenuItemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MenuItem>("NicePhotosModel.FK_Role_MenuItem_MenuItem", "MenuItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MenuItem>("NicePhotosModel.FK_Role_MenuItem_MenuItem", "MenuItem", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NicePhotosModel", "FK_Role_MenuItem_Role", "Role")]
        public Role Role1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("NicePhotosModel.FK_Role_MenuItem_Role", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("NicePhotosModel.FK_Role_MenuItem_Role", "Role").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> Role1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("NicePhotosModel.FK_Role_MenuItem_Role", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("NicePhotosModel.FK_Role_MenuItem_Role", "Role", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
